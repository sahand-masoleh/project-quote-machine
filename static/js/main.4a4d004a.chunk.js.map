{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Text","props","useState","fade","setFade","text","setText","height","setHeight","scrollHeight","setScrollHeight","textRef","useRef","useEffect","fader","setTimeout","current","id","style","ref","className","onAnimationEnd","Author","TweetQuote","href","target","rel","icon","faTwitter","NewQuote","click","setClick","rotate","onClick","function","faRedo","App","quote","setQuote","author","setAuthor","index","setIndex","colorArray","setColorArray","quotes","data","newQuote","Math","round","length","random","randomInt","min","max","randomColor","steps","map","v","i","j","transition","prevColorArray","requestAnimationFrame","newColor","background","faQuoteLeft","faQuoteRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a4d004a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport * as data from \"./quotes.json\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faRedo,\n  faQuoteLeft,\n  faQuoteRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [index, setIndex] = useState(0);\n  const [colorArray, setColorArray] = useState([360, 100, 80, 0]);\n  const quotes = data.quotes;\n\n  useEffect(() => newQuote(), []); //Grab a quote on the firt load, equal to componentDidMount\n\n  function newQuote() {\n    setIndex(Math.round(quotes.length * Math.random()));\n    setQuote(quotes[index].quote);\n    setAuthor(quotes[index].author);\n    newColor();\n  }\n\n  function newColor() {\n    let randomInt = (min, max) => {\n      return min + Math.round(Math.random() * (max - min));\n    };\n    let randomColor = [\n      randomInt(0, 360),\n      randomInt(0, 100),\n      randomInt(40, 70),\n      randomInt(0, 360),\n    ];\n    let duration = 500;\n    let speed = 1000 / 60;\n    let frames = duration / speed;\n    let steps = colorArray.map((v, i) => (randomColor[i] - v) / frames);\n    let j = 0;\n    (function transition() {\n      setColorArray((prevColorArray) => [\n        prevColorArray[0] + steps[0],\n        prevColorArray[1] + steps[1],\n        prevColorArray[2] + steps[2],\n        prevColorArray[3] + steps[3],\n      ]);\n      j++;\n      if (j <= frames) {\n        requestAnimationFrame(transition);\n      }\n    })();\n  }\n  return (\n    <div\n      id=\"body\"\n      style={{\n        background: `linear-gradient(${colorArray[3]}deg, hsl(${\n          colorArray[0]\n        }, ${colorArray[1]}%, ${colorArray[2]}%)0%,hsl(${\n          colorArray[0] + 180\n        }, ${colorArray[1]}%, ${colorArray[2]}%)100%)`,\n      }}\n    >\n      <div id=\"quote-box\">\n        <FontAwesomeIcon icon={faQuoteLeft} className=\"quotation-mark\" />\n        <Text text={quote} />\n        <FontAwesomeIcon icon={faQuoteRight} className=\"quotation-mark\" />\n        <Author text={author} />\n        <TweetQuote text={quote} />\n        <NewQuote function={newQuote} />\n      </div>\n    </div>\n  );\n}\n\nfunction Text(props) {\n  const [fade, setFade] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [height, setHeight] = useState([\"0\"]);\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const textRef = useRef(null);\n  useEffect(() => {\n    fader();\n    setTimeout(() => setText(props.text), 250);\n    setScrollHeight(textRef.current.scrollHeight);\n    transition();\n  }, [props.text]);\n  const fader = () => {\n    setFade(!fade);\n  };\n  function transition() {\n    setHeight(scrollHeight);\n  }\n  return (\n    <div id=\"text\" style={{ height: height }}>\n      <p ref={textRef} className={fade ? \"fade\" : null} onAnimationEnd={fader}>\n        {text}\n      </p>\n    </div>\n  );\n}\n\nfunction Author(props) {\n  const [fade, setFade] = useState(false);\n  const [text, setText] = useState(\"\");\n  const fader = () => {\n    setFade(!fade);\n  };\n  useEffect(() => {\n    fader();\n    setTimeout(() => setText(props.text), 250);\n  }, [props.text]);\n  return (\n    <div id=\"author\">\n      <p className={fade ? \"fade\" : null} onAnimationEnd={fader}>\n        <em>-{text}</em>\n      </p>\n    </div>\n  );\n}\n\nconst TweetQuote = (props) => {\n  return (\n    <a\n      href={\"https://www.twitter.com/intent/tweet?text=\" + props.text}\n      id=\"tweet-quote\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <p>\n        <FontAwesomeIcon icon={faTwitter} />\n      </p>\n    </a>\n  );\n};\n\nfunction NewQuote(props) {\n  const [click, setClick] = useState(false);\n  const rotate = () => {\n    setClick(!click);\n  };\n  const onClick = () => {\n    props.function();\n    rotate();\n  };\n  return (\n    <div\n      id=\"new-quote\"\n      className={click ? \"rotate\" : null}\n      onClick={onClick}\n      onAnimationEnd={rotate}\n    >\n      <p>\n        <FontAwesomeIcon icon={faRedo} />\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}