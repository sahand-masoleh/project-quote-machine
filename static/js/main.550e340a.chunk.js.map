{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","quote","author","quotes","index","color","newQuote","bind","fetch","then","res","json","data","setState","this","Math","round","length","random","newColor","randomInt","min","max","randomColor","id","style","background","text","function","React","Component","Text","icon","faQuoteLeft","faQuoteRight","Author","TweetQuote","href","target","rel","faTwitter","NewQuote","onClick","faRedo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0UAUMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,aACPC,OAAQ,GACRC,OAAQ,GACRC,MAAO,EACPC,MAAO,WAET,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATC,E,gEAWE,IAAD,OAClBC,MACE,+IAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZV,OAAQS,EAAKT,YAGhBM,MAAK,WACJ,EAAKH,gB,iCAITQ,KAAKD,SAAS,CACZT,MAAOW,KAAKC,MAAMF,KAAKd,MAAMG,OAAOc,OAASF,KAAKG,YAEpDJ,KAAKD,SAAS,CACZZ,MAAOa,KAAKd,MAAMG,OAAOW,KAAKd,MAAMI,OAAOH,MAC3CC,OAAQY,KAAKd,MAAMG,OAAOW,KAAKd,MAAMI,OAAOF,SAE9CY,KAAKK,a,iCAGL,IAAIC,EAAY,SAACC,EAAKC,GACpB,OAAOD,EAAMN,KAAKC,MAAMD,KAAKG,UAAYI,EAAMD,KAE7CE,EAAc,WAChB,MACE,OACAH,EAAU,EAAG,KACb,KACAA,EAAU,EAAG,KACb,MACAA,EAAU,GAAI,IACd,MAGJN,KAAKD,SAAS,CACZR,MACE,mBACAe,EAAU,EAAG,KACb,QACAG,IACA,QACAA,IACA,a,+BAIJ,MAAyB,eAArBT,KAAKd,MAAMC,MAEX,yBAAKuB,GAAG,YAAYC,MAAO,CAAEC,WAAYZ,KAAKd,MAAMK,QAClD,kBAAC,EAAD,CAAMsB,KAAMb,KAAKd,MAAMC,QACvB,kBAAC,EAAD,CAAQ0B,KAAMb,KAAKd,MAAME,SACzB,kBAAC,EAAD,CAAYyB,KAAMb,KAAKd,MAAMC,QAC7B,kBAAC,EAAD,CAAU2B,SAAUd,KAAKR,YAItB,6C,GAzEKuB,IAAMC,WA8ElBC,EAAO,SAAChC,GACZ,OACE,yBAAKyB,GAAG,QACN,kBAAC,IAAD,CAAiBQ,KAAMC,IAAaT,GAAG,mBACvC,2BACGzB,EAAM4B,MAGT,kBAAC,IAAD,CAAiBK,KAAME,IAAcV,GAAG,qBAKxCW,EAAS,SAACpC,GACd,OACE,yBAAKyB,GAAG,UACN,2BACE,gCAAMzB,EAAM4B,SAMdS,EAAa,SAACrC,GAClB,OACE,uBACEsC,KAAM,6CAA+CtC,EAAM4B,KAC3DH,GAAG,cACHc,OAAO,SACPC,IAAI,uBAEJ,2BACE,kBAAC,IAAD,CAAiBP,KAAMQ,SAMzBC,EAAW,SAAC1C,GAChB,OACE,yBAAKyB,GAAG,aACN,uBAAGkB,QAAS3C,EAAM6B,UAChB,kBAAC,IAAD,CAAiBI,KAAMW,SAKhB7C,IC3HK8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.550e340a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faRedo,\n  faQuoteLeft,\n  faQuoteRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"Loading...\",\n      author: \"\",\n      quotes: [],\n      index: 0,\n      color: \"#000000\",\n    };\n    this.newQuote = this.newQuote.bind(this);\n  }\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/sahand-masoleh/fd85e3fd6dbd412b0531a96df53480ad/raw/be27f1fcfa882b05a271ffaa6dc93258cdd11aef/quotes.json\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          quotes: data.quotes,\n        });\n      })\n      .then(() => {\n        this.newQuote();\n      });\n  }\n  newQuote() {\n    this.setState({\n      index: Math.round(this.state.quotes.length * Math.random()),\n    });\n    this.setState({\n      quote: this.state.quotes[this.state.index].quote,\n      author: this.state.quotes[this.state.index].author,\n    });\n    this.newColor();\n  }\n  newColor() {\n    let randomInt = (min, max) => {\n      return min + Math.round(Math.random() * (max - min));\n    };\n    let randomColor = () => {\n      return (\n        \"hsl(\" +\n        randomInt(0, 360) +\n        \", \" +\n        randomInt(0, 100) +\n        \"%, \" +\n        randomInt(50, 80) +\n        \"%)\"\n      );\n    };\n    this.setState({\n      color:\n        \"linear-gradient(\" +\n        randomInt(0, 360) +\n        \"deg, \" +\n        randomColor() +\n        \" 0%, \" +\n        randomColor() +\n        \" 100%)\",\n    });\n  }\n  render() {\n    if (this.state.quote !== \"Loading...\") {\n      return (\n        <div id=\"quote-box\" style={{ background: this.state.color }}>\n          <Text text={this.state.quote} />\n          <Author text={this.state.author} />\n          <TweetQuote text={this.state.quote} />\n          <NewQuote function={this.newQuote} />\n        </div>\n      );\n    } else {\n      return <p>Loading...</p>;\n    }\n  }\n}\n\nconst Text = (props) => {\n  return (\n    <div id=\"text\">\n      <FontAwesomeIcon icon={faQuoteLeft} id=\"quotation-mark\" />\n      <p>\n        {props.text}\n        {/* <FontAwesomeIcon icon={faQuoteRight} /> */}\n      </p>\n      <FontAwesomeIcon icon={faQuoteRight} id=\"quotation-mark\" />\n    </div>\n  );\n};\n\nconst Author = (props) => {\n  return (\n    <div id=\"author\">\n      <p>\n        <em>-{props.text}</em>\n      </p>\n    </div>\n  );\n};\n\nconst TweetQuote = (props) => {\n  return (\n    <a\n      href={\"https://www.twitter.com/intent/tweet?text=\" + props.text}\n      id=\"tweet-quote\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <p>\n        <FontAwesomeIcon icon={faTwitter} />\n      </p>\n    </a>\n  );\n};\n\nconst NewQuote = (props) => {\n  return (\n    <div id=\"new-quote\">\n      <p onClick={props.function}>\n        <FontAwesomeIcon icon={faRedo} />\n      </p>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}