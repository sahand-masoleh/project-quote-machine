{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","quote","author","quotes","data","index","color","newQuote","bind","this","setState","Math","round","length","random","newColor","randomInt","min","max","randomColor","quoteBoxStyle","background","id","style","text","function","React","Component","Text","icon","faQuoteLeft","faQuoteRight","Author","TweetQuote","href","target","rel","faTwitter","NewQuote","click","rotate","onClick","className","onAnimationEnd","faRedo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qiZAWMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,aACPC,OAAQ,GACRC,OAAQC,IACRC,MAAO,EACPC,MAAO,WAET,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATC,E,gEAYjBC,KAAKF,a,iCAGLE,KAAKC,SAAS,CACZL,MAAOM,KAAKC,MAAMH,KAAKT,MAAMG,OAAOU,OAASF,KAAKG,YAEpDL,KAAKC,SAAS,CACZT,MAAOQ,KAAKT,MAAMG,OAAOM,KAAKT,MAAMK,OAAOJ,MAC3CC,OAAQO,KAAKT,MAAMG,OAAOM,KAAKT,MAAMK,OAAOH,SAE9CO,KAAKM,a,iCAGL,IAAIC,EAAY,SAACC,EAAKC,GACpB,OAAOD,EAAMN,KAAKC,MAAMD,KAAKG,UAAYI,EAAMD,KAE7CE,EAAc,WAChB,MAAM,OAAN,OAAcH,EAAU,EAAG,KAA3B,aAAoCA,EAAU,EAAG,KAAjD,cAA2DA,EACzD,GACA,IAFF,OAKFP,KAAKC,SAAS,CACZJ,MAAM,mBAAD,OAAqBU,EACxB,EACA,KAFG,gBAGIG,IAHJ,cAGuBA,IAHvB,a,+BAOP,IAAMC,EAAgB,CACpBC,WAAYZ,KAAKT,MAAMM,OAEzB,OACE,yBAAKgB,GAAG,YAAYC,MAAOH,GACzB,kBAAC,EAAD,CAAMI,KAAMf,KAAKT,MAAMC,QACvB,kBAAC,EAAD,CAAQuB,KAAMf,KAAKT,MAAME,SACzB,kBAAC,EAAD,CAAYsB,KAAMf,KAAKT,MAAMC,QAC7B,kBAAC,EAAD,CAAUwB,SAAUhB,KAAKF,gB,GAnDfmB,IAAMC,WAyDlBC,EAAO,SAAC7B,GACZ,OACE,yBAAKuB,GAAG,QACN,kBAAC,IAAD,CAAiBO,KAAMC,IAAaR,GAAG,mBACvC,2BAAIvB,EAAMyB,MACV,kBAAC,IAAD,CAAiBK,KAAME,IAAcT,GAAG,qBAKxCU,EAAS,SAACjC,GACd,OACE,yBAAKuB,GAAG,UACN,2BACE,gCAAMvB,EAAMyB,SAMdS,EAAa,SAAClC,GAClB,OACE,uBACEmC,KAAM,6CAA+CnC,EAAMyB,KAC3DF,GAAG,cACHa,OAAO,SACPC,IAAI,uBAEJ,2BACE,kBAAC,IAAD,CAAiBP,KAAMQ,SAMzBC,E,kDACJ,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEuC,OAAO,GACtB,EAAKC,OAAS,EAAKA,OAAOhC,KAAZ,gBACd,EAAKiC,QAAU,EAAKA,QAAQjC,KAAb,gBAJE,E,qDAOjBC,KAAKC,SAAS,CAAE6B,OAAQ9B,KAAKT,MAAMuC,U,gCAGnC9B,KAAKV,MAAM0B,WACXhB,KAAK+B,W,+BAGG,IAAD,OACP,OACE,yBACElB,GAAG,YACHoB,UAAWjC,KAAKT,MAAMuC,MAAQ,SAAW,KACzCE,QAAShC,KAAKgC,QACdE,eAAgB,kBAAM,EAAKjC,SAAS,CAAE6B,OAAQ,EAAKvC,MAAMuC,UAEzD,2BACE,kBAAC,IAAD,CAAiBV,KAAMe,Y,GAxBVlB,IAAMC,WA+Bd7B,IC1HK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ad053b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport * as data from \"./quotes.json\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faRedo,\n  faQuoteLeft,\n  faQuoteRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"Loading...\",\n      author: \"\",\n      quotes: data.quotes,\n      index: 0,\n      color: \"#000000\",\n    };\n    this.newQuote = this.newQuote.bind(this);\n  }\n  componentDidMount() {\n    this.newQuote();\n  }\n  newQuote() {\n    this.setState({\n      index: Math.round(this.state.quotes.length * Math.random()),\n    });\n    this.setState({\n      quote: this.state.quotes[this.state.index].quote,\n      author: this.state.quotes[this.state.index].author,\n    });\n    this.newColor();\n  }\n  newColor() {\n    let randomInt = (min, max) => {\n      return min + Math.round(Math.random() * (max - min));\n    };\n    let randomColor = () => {\n      return `hsl(${randomInt(0, 360)}, ${randomInt(0, 100)}%, ${randomInt(\n        50,\n        80\n      )}%)`;\n    };\n    this.setState({\n      color: `linear-gradient(${randomInt(\n        0,\n        360\n      )}deg, ${randomColor()}0%,${randomColor()}100%)`,\n    });\n  }\n  render() {\n    const quoteBoxStyle = {\n      background: this.state.color,\n    };\n    return (\n      <div id=\"quote-box\" style={quoteBoxStyle}>\n        <Text text={this.state.quote} />\n        <Author text={this.state.author} />\n        <TweetQuote text={this.state.quote} />\n        <NewQuote function={this.newQuote} />\n      </div>\n    );\n  }\n}\n\nconst Text = (props) => {\n  return (\n    <div id=\"text\">\n      <FontAwesomeIcon icon={faQuoteLeft} id=\"quotation-mark\" />\n      <p>{props.text}</p>\n      <FontAwesomeIcon icon={faQuoteRight} id=\"quotation-mark\" />\n    </div>\n  );\n};\n\nconst Author = (props) => {\n  return (\n    <div id=\"author\">\n      <p>\n        <em>-{props.text}</em>\n      </p>\n    </div>\n  );\n};\n\nconst TweetQuote = (props) => {\n  return (\n    <a\n      href={\"https://www.twitter.com/intent/tweet?text=\" + props.text}\n      id=\"tweet-quote\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <p>\n        <FontAwesomeIcon icon={faTwitter} />\n      </p>\n    </a>\n  );\n};\n\nclass NewQuote extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { click: false };\n    this.rotate = this.rotate.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n  rotate() {\n    this.setState({ click: !this.state.click });\n  }\n  onClick() {\n    this.props.function();\n    this.rotate();\n  }\n\n  render() {\n    return (\n      <div\n        id=\"new-quote\"\n        className={this.state.click ? \"rotate\" : null}\n        onClick={this.onClick}\n        onAnimationEnd={() => this.setState({ click: !this.state.click })}\n      >\n        <p>\n          <FontAwesomeIcon icon={faRedo} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}